	Understanding Bridge network
	----------------------------
		Create your own bridge network

		Limited to a single host running Docker Engine. 
			$ docker network create -d bridge my_bridge

			-d flag: define the type of driver.
					default is also bridge.

			$ docker network ls

	
			$ docker network inspect my_bridge
			[
				{
					"Name": "my_bridge",
					"Id": "5a8afc6364bccb199540e133e63adb76a557906dd9ff82b94183fc48c40857ac",
					"Scope": "local",
					"Driver": "bridge",
					"IPAM": {
						"Driver": "default",
						"Config": [
							{
								"Subnet": "10.0.0.0/24",
								"Gateway": "10.0.0.1"
							}
						]
					},
					"Containers": {},
					"Options": {},
					"Labels": {}
				}
			]

	Here is what we will do.
	-----------------------
	1. Create a container attached to my_bridge - a1
	2. Create a container attached to bridge - a2
	3. Get inside container a2
		Ping container a1
		It fails.
	4. Attach container a2 also to my_bridge.
	5. Now ping a1 and it should work.

	Add containers to a network
	To build secure web applications create a network. 
	Networks, provide complete isolation for containers. 
	You can add containers to a network when you first run a container.

	docker run -d --net=my_bridge --name a1 nginx
	docker run -d --net=bridge --name a2 nginx
	
	inspect my_bridge 
		a container attached. 
	inspect container 
		see the network.
	
	Now, open a shell to your running ap container:
	$ docker container exec -it a2 bash

		apt-get -y update && apt-get -y upgrade
		apt-get install -y iputils-ping
		
		root@a205f0dd33b2:/# ping 172.18.0.2
		ping 172.17.0.2
		PING 172.17.0.2 (172.17.0.2) 56(84) bytes of data.
		^C
		--- 172.17.0.2 ping statistics ---
		44 packets transmitted, 0 received, 100% packet loss, time 43185ms
		After a bit, use CTRL-C to end the ping and notice that the ping failed. That is because the two containers are running on different networks. You can fix that. Then, use the exit command to close the container.

	Attach a2 to my_bridge. 
	$ docker network connect my_bridge a2

	Open a new shell into the a2 and try ping

	$ docker container exec -it a2 bash

	root@a205f0dd33b2:/# ping a1
	PING web (10.0.0.2) 56(84) bytes of data.
	64 bytes from web (10.0.0.2): icmp_seq=1 ttl=64 time=0.095 ms

	The ping shows it is contacting a different IP address, the address on the my_bridge which is different from its address on the bridge network.
	
-----------------------------------------------------------------------------------------------------------------------------
3. https://docs.docker.com/config/containers/container-networking/
	All n/w interfaces (bridge/Overlay or any other) 
		There is no difference to the container creation (except bridge).
	For the cotnainer
		there is a unique IP address with in the decided network.
			Depending on the type of n/w
	
	
	
	Published ports
	---------------

	By default containers are connected to Bridge network.
		They are not bound to ports of the Host.
	To make a port available --publish or -p flag. 
	Creates a firewall rule which maps a container port to a port on the Docker host.
		

Different ways to publish ports
-----------------------------
	-p 8080:80	(host port: container port) 
		Map TCP port 80 in the container to port 8080 on the Docker host.
		
	-p 192.168.1.100:8080:80 
		Map TCP port 80 in the container to port 8080 on the Docker host for connections to host IP 192.168.1.100.
		
	-p 8080:80/udp	
		Map UDP port 80 in the container to port 8080 on the Docker host.

	-p 8080:80/tcp 
		Map TCP port 80 in the container to TCP port 8080 on the Docker host


		IP address and hostname
		-----------------------
	Default
		container is assigned an IP address for every Docker network it connects to.
			(if n/w supports it)
		assigned from the pool assigned to the network
		Docker daemon effectively acts as a DHCP server for each container. 
			(What is DHCP server? Allocates and keeps a record of all leased IP addresses)
		Each network also has a default subnet mask and gateway.

	When the container starts, 
		it can only be connected to a single network
			using --network or --net
	And connect a running container to multiple networks 
		using "docker network connect". 
		
		
		ask for ip: --ip or --ip6 
		-------------------------
	While starting a container using the --network (--net) flag, 
		or 
	While connecting an existing container to a different network
		you can specify the IP address
			--ip or --ip6 flags.
			e.g. $ docker network connect --ip 10.10.36.122 multi-host-network container2

	Container’s hostname 
		defaults to be the container’s ID. 
	Override the hostname using --hostname. 
	While connecting to an existing network 
		use --alias flag to specify an additional network alias 
			for the container on that network.

		DNS services (DNS: Phone book of your n/w)
		------------
	The DNS (Domain Name System) server settings on your device are your gateway to the web.	
	Default (container connected to bridge)
		container inherits the DNS settings of the host
		as defined in the /etc/resolv.conf. 
		 
	Containers that use the default bridge network 
		get a copy of this file
		Containers also have same /etc/resolv.conf
	Other containers (not using bridge) 
		use Docker’s embedded DNS server, 
		forwards external DNS lookups to the DNS servers configured on the host.

	Custom hosts defined in /etc/hosts are not inherited. 
	To pass additional hosts into your container, 
		https://docs.docker.com/engine/reference/commandline/run/#add-entries-to-container-hosts-file---add-host
		
	Flag	Description
	--dns	
		The IP address of a DNS server. 
		To specify multiple DNS servers, 
			use multiple --dns flags. 
		If the container cannot reach any of the IP addresses you specify, 
			Google’s public DNS server 8.8.8.8 is added, 
			so that your container can resolve internet domains.
	--dns-search	
		A DNS search domain to search non-fully-qualified hostnames. 
		For multiple DNS search prefixes, use multiple --dns-search flags.
	
	--dns-opt	
		A key-value pair representing a DNS option and its value. See your operating system’s documentation for resolv.conf for valid options.
	
	--hostname	
		The hostname a container uses for itself. Defaults to the container’s ID if not specified.

-----------------------------------------------------------------------------------------------------------------------------
4. https://docs.docker.com/network/network-tutorial-standalone/

	Networking for standalone containers - not swarm
	
	Use the default bridge network
	------------------------------
	docker network ls
		bridge, host and none
		
		host and none
			Not full fledged network.
	
------------------------------------------------------------------------------------------------	
	Skip the below
		docker run -dit --name alpine1 alpine ash 
			#With -d the container would stop after starting but not with -dit. Didn't find -dit in documentation.
		docker run -dit --name alpine1 alpine ash

		docker network inspect bridge
			The above containers should be listed.
	
	from terminal 1
		docker attach alpine1
			get inside
		ip addr show
			displays lo and eth0 with IP
		ping -c 2 google.com
			responds
		ping -c 2 172.17.0.3 (apline2 IP)
			passes
		ping c 2 alpine2
			fails: bad address
		
	from terminal 2	
		docker attach alpine2
		Do control + p + q (without releasing)
			Works only in alpine containers.
------------------------------------------------------------------------------------------------
			
	Automatic Service Discovery
	---------------------------
	On user-defined networks like mybridge, 
		containers can resolve a container name to an IP address. 
		This capability is called automatic service discovery
		
	1. docker network create --driver bridge mybridge
	2. docker network ls
	3. docker network inspect mybridge
	4. Create four containers.
		docker run -it --name alpine1 --network mybridge alpine ash
		docker run -it --name alpine2 --network mybridge alpine ash
		docker run -it --name alpine3 alpine ash #default to bridge
		docker run -it --name alpine4 --network mybridge alpine ash
		
	5. docker network connect bridge alpine4
	6. docker container ls
	7. Inspect the bridge network and the mybridge network again:

		$ docker network inspect bridge
			Containers alpine3 and alpine4 are connected to the bridge network.
		$ docker network inspect mybridge
			Containers alpine1, alpine2, and alpine4 are connected to the mybridge network.
	8. docker container attach alpine1
		ping -c 2 alpine2 #ping using container name (not hostname)
		ping -c 2 alpine4
		ping -c 2 alpine1
			All passes and connects
	9. From alpine1, you should not be able to connect to alpine3 as they are not on the same n/w
		ping -c 2 alpine3
			ping: bad address 'alpine3'
			
		Cannot access either through container name or ip address.
	10. Container alpine4 shares the network with all containers so. It should be able to ping all containers by IP.
		
		docker container attach alpine4
		ping -c 2 alpine1
		ping -c 2 alpine2
		ping -c 2 alpine4
			All 3 pass
		
		ping -c 2 alpine3
			ping: bad address 'alpine3'
			Default bridge doesn't support lookup through Container name.
		
	11. Final test
		Verify that all containers can ping google.com
		
			docker container attach <name>
				ping google.com
			Control + p. Control + q	
				
	12. Stop and remove all containers and the mybridge network.
		$ docker container stop alpine1 alpine2 alpine3 alpine4
		$ docker container rm alpine1 alpine2 alpine3 alpine4
		$ docker network rm mybridge
